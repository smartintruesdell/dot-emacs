;;; mt-config --- Shawn Martin-Truesdell's Emacs Configuration
;;; License:
;; ---------------------------------------------------------------------
;; Copyright (C) 2022 - Shawn Martin-Truesdell
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;
;; ---------------------------------------------------------------------
;;; Commentary:
;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file.
;; You should make any changes there and regenerate it from Emacs org-mode
;; using C-c C-v t
;;
;; ---------------------------------------------------------------------
;;; Code:

(require 'package)                   ; Bring in to the environment all package management functions

;; A list of package repositories
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org"   . "https://orgmode.org/elpa/")
			 ("elpa"  . "https://elpa.gnu.org/packages/")))

(unless package-archive-contents     ; Unless a package archive already exists,
  (package-refresh-contents))        ; Refresh package contents so that Emacs knows which packages to load


;; Initialize use-package on non-linux platforms
(unless (package-installed-p 'use-package)        ; Unless "use-package" is installed, install "use-package"
  (package-install 'use-package))

(require 'use-package)                            ; Once it's installed, we load it using require

;; Make sure packages are downloaded and installed before they are run
;; also frees you from having to put :ensure t after installing EVERY PACKAGE.
(setq use-package-always-ensure t)

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(setq use-package-always-demand t)
(package-initialize)
(use-package dash)

(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :config
  (setq exec-path-from-shell-variables '("PATH"))
  (exec-path-from-shell-initialize))

(setq-default
 ad-redefinition-action 'accept                   ; Silence warnings for redefinition
 cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
 display-time-default-load-average nil            ; Don't display load average
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Use spaces instead of tabs
 inhibit-startup-screen t                         ; Disable start-up screen
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 kill-ring-max 128                                ; Maximum length of kill ring
 load-prefer-newer t                              ; Prefers the newest version of a file
 mark-ring-max 128                                ; Maximum length of mark ring
 scroll-conservatively most-positive-fixnum       ; Always scroll by one line
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 tab-width 2                                      ; Set width for tabs
 user-full-name "Shawn Martin-Truesdell"          ; Set the full name of the current user
 user-mail-address "shawn@martin-truesdell.com"   ; Set the email address of the current user
 vc-follow-symlinks t                             ; Always follow the symlinks
 view-read-only t)                                ; Always open read-only buffers in view-mode
(cd "~/")                                         ; Move to the user directory
(column-number-mode 1)                            ; Show the column number
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(global-hl-line-mode)                             ; Hightlight current line
(set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
(show-paren-mode 1)                               ; Show the parent
(setq backup-directory-alist '(("." . "~/.emacs-saves")))
(setq ring-bell-function 'ignore)                 ; No more dings
(global-unset-key (kbd "C-z"))                    ; No more minimizing on accident
;(pixel-scroll-precision-mode) ;; emacs 29

(defun default-to (fb val)
  (if (eq nil val)
      fb
    val))
(defvar xdg-bin (default-to "~/.local/bin" (getenv "XDG_BIN_HOME"))
  "The XDG bin base directory.")

(defvar xdg-cache (default-to "~/.cache" (getenv "XDG_CACHE_HOME"))
  "The XDG cache base directory.")

(defvar xdg-config (default-to "~/.config" (getenv "XDG_CONFIG_HOME"))
  "The XDG config base directory.")

(defvar xdg-data (default-to "~/.local/share" (getenv "XDG_DATA_HOME"))
  "The XDG data base directory.")

(defvar xdg-lib (default-to "~/.local/lib" (getenv "XDG_LIB_HOME"))
  "The XDG lib base directory.")

(setq-default
 ;; Autosave Directory
 auto-save-list-file-name (expand-file-name (format "%s/emacs/auto-save-list" xdg-data))
 ;; Session customizations
 custom-file (expand-file-name (format "%s/emacs/custom.el" xdg-data)))
(when (file-exists-p custom-file)
  (load custom-file t))

;;; my/set-autosave-file-directory --- Sets the autosave/temp file directory
;;; Commentary:
;;; Code:
(defun my/set-autosave-file-directory ()
  "Set the autosave/temp file directory."
  (let ((user-temporary-file-directory (concat temporary-file-directory user-login-name "/")))
    (make-directory user-temporary-file-directory t)
    (setq create-lockfiles nil)
    ;; Lockfiles are creating the '.#______' files that are messing up dev servers
    (setq backup-by-copying t)
    (setq backup-directory-alist
          `(("." . ,user-temporary-file-directory)
            (,tramp-file-name-regexp nil)))
    (setq auto-save-list-file-prefix
          (concat user-temporary-file-directory ".auto-saves-"))
    (setq auto-save-file-name-transforms
          `((".*" ,(expand-file-name "\\2" user-temporary-file-directory) t)))))

(my/set-autosave-file-directory)

(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)

(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)

(setq-default frame-title-format '("Shawn's Emacs :: %b"))

(use-package nano-theme
  :straight (nano-theme :type git :host github :repo "rougier/nano-theme")
  :custom
  (nano-fonts-use t)
  (nano-light-salient "SteelBlue3")
  :init (load-theme 'nano-light t))

(use-package nano-modeline
  :straight (nano-modeline :type git :host github :repo "rougier/nano-modeline")
  :init (nano-modeline-mode))

(when window-system
  (menu-bar-mode -1)              ; Disable the menu bar
  (scroll-bar-mode -1)            ; Disable the scroll bar
  (tool-bar-mode -1)              ; Disable the tool bar
  (tooltip-mode -1))              ; Disable the tooltips

(use-package org-contrib)
(use-package org
    :after org-contrib
    :init
    (defun my/org-compare-times (clocked estimated)
      "Gets the ratio between the timed time and the estimated time."
      (if (and (> (length clocked) 0) estimated)
          (format "%.2f"
                  (/ (* 1.0 (org-hh:mm-string-to-minutes clocked))
                     (org-hh:mm-string-to-minutes estimated)))
        ""))
    (defun my/org-archive-done-tasks ()
      "Archives finished or cancelled tasks."
      (interactive)
      (org-map-entries
       (lambda ()
         (org-archive-subtree)
         (setq org-map-continue-from (outline-previous-heading)))
       "TODO=\"DONE\"|TODO=\"CANCELLED\"" (if (org-before-first-heading-p) 'file 'tree)))
    (defun help/real-insert (char)
      (cl-flet ((do-insert
                 () (if (bound-and-true-p org-mode)
                        (org-self-insert-command 1)
                      (self-insert-command 1))))
        (setq last-command-event char)
        (do-insert)))
    
    (defun help/insert-em-dash ()
      "Insert a EM-DASH.
    - \"best limited to two appearances per sentence\"
    - \"can be used in place of commas to enhance readability.
       Note, however, that dashes are always more emphatic than
       commas\"
    - \"can replace a pair of parentheses. Dashes are considered
       less formal than parentheses; they are also more intrusive.
       If you want to draw attention to the parenthetical content,
       use dashes. If you want to include the parenthetical content
       more subtly, use parentheses.\"
      - \"Note that when dashes are used in place of parentheses,
         surrounding punctuation should be omitted.\"
    - \"can be used in place of a colon when you want to emphasize
       the conclusion of your sentence. The dash is less formal than
       the colon.\"
    - \"Two em dashes can be used to indicate missing portions of a
       word, whether unknown or intentionally omitted.\"
      - \"When an entire word is missing, either two or three em
         dashes can be used. Whichever length you choose, use it
         consistently throughout your document. Surrounding punctuation
         should be placed as usual.\"
    - \"The em dash is typically used without spaces on either side,
       and that is the style used in this guide. Most newspapers,
       however, set the em dash off with a single space on each side.\"
    Source: URL `https://www.thepunctuationguide.com/em-dash.html'"
      (interactive)
      (help/real-insert ?—))
    (defun help/insert-en-dash ()
      "Insert a EN-DASH.
    - \"is used to represent a span or range of numbers, dates,
       or time. There should be no space between the en dash and
       the adjacent material. Depending on the context, the en
       dash is read as “to” or “through.”\"
      - \"If you introduce a span or range with words such as
         'from' or 'between', do not use the en dash.\"
    - \"is used to report scores or results of contests.\"
    - \"an also be used between words to represent conflict,
       connection, or direction.\"
    - \"When a compound adjective is formed with an element that
       is itself an open compound or hyphenated compound, some
       writers replace the customary hyphen with an en dash. This
       is an aesthetic choice more than anything.
    Source: URL `https://www.thepunctuationguide.com/en-dash.html'"
      (interactive)
      (help/real-insert ?–))
    (defun help/insert-hyphen ()
      "Insert a HYPHEN
    - \"For most writers, the hyphen’s primary function is the
       formation of certain compound terms. The hyphen is also
       used for word division [in typesetting].
    - \"Compound terms are those that consist of more than one
       word but represent a single item or idea.\"
    Source: URL `https://www.thepunctuationguide.com/hyphen.html'"
      (interactive)
      (help/real-insert ?-))
    :bind
    (:map org-mode-map
          ("C-a" . org-beginning-of-line)
          ("C-e" . org-end-of-line)
          ("C-k" . org-kill-line)
          ("-" . help/insert-hyphen)
          ("s-_" . help/insert-em-dash)
          ("s--" . help/insert-en-dash))
    :custom-face
    (fixed-pitch ((t (:family "Fira Code Retina" :height 120))))
    (org-block ((t (:background "gray95"))))
    (org-quote ((t (:background "azure2"))))
    (org-indent ((t (:inherit (org-hide fixed-pitch)))))
    (org-done ((t (:foreground "PaleGreen"
                               :strike-through t))))
    (org-tag  ((t (:height 80 :foreground "snow4"))))
    :hook
    (after-save . my/config-tangle)
    (org-mode . org-indent-mode)
    (org-mode . (lambda ()
                  "Beautify Org Checkbox Symbol"
                  (push '("[ ]" . "☐" ) prettify-symbols-alist)
                  (push '("[X]" . "☑" ) prettify-symbols-alist)
                  (push '("[-]" . "⊡" ) prettify-symbols-alist)
                  (prettify-symbols-mode)))
    (org-mode . visual-line-mode)
    (org-mode . variable-pitch-mode)
    :custom
    (org-archive-location "~/.personal/archives/%s::")
    (org-ditaa-jar-path "~/.local/lib/ditaa0_9.jar")
    (org-modules '(org-habit
                   org-info
                   org-mouse
                   org-protocol))
    (org-tag-alist '(("@work" . ?w)
                     ("@errands" . ?e)
                     ("@home" . ?h)
                     ("@kiddo" . ?k)
                     ("@phone" . ?p)
                     ("@reading" . ?r)
                     ("@admin" . ?a)
                     ("fuzzy" . ?0)))
    (org-tags-exclude-from-inheritance '("crypt" "project"))
    (org-todo-keywords '((sequence "TODO(t)"
                                   "STARTED(s)"
                                   "WAITING(w@/!)"
                                   "SOMEDAY(.)" "|" "DONE(x!)" "CANCELLED(c@)")))
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-refile-use-cache nil)
    (org-refile-use-outline-path t)
    (org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
    (org-log-done 'time)
    (org-log-into-drawer "LOGBOOK")
    (org-src-window-setup 'current-window)
    (org-hide-emphasis-markers t)
    (org-blank-before-new-entry '((heading . t)))
    (org-cycle-include-plain-lists 'integrate)
    (org-expiry-inactive-timestamps t)
    (org-export-backends '(ascii html latex md))
    (org-startup-folded nil)
    (org-startup-indented t)
    (org-startup-with-inline-images t)
    (org-use-effective-time t)
    (org-yank-adjusted-subtrees t)
    (org-hidden-keywords '(author email subtitle title))
    (org-hide-emphasis-markers t)
    (prettify-symbols-unprettify-at-point 'right-edge)
    (org-fontify-done-headline t)
    (org-tags-column 0)
    :config
    (defun my-adjoin-to-list-or-symbol (element list-or-symbol)
      (let ((list (if (not (listp list-or-symbol))
                      (list list-or-symbol)
                    list-or-symbol)))
        (require 'cl-lib)
        (cl-adjoin element list)))
    
    (defun fix-org-block-faces ()
      (mapc
       (lambda (face)
         (set-face-attribute
          face nil
          :inherit
          (my-adjoin-to-list-or-symbol
           'fixed-pitch
           (face-attribute face :inherit))))
       (list
        'org-block-begin-line
        'org-block
        'org-block-end-line
        'org-verbatim
        'org-drawer
        'org-special-keyword
        'org-table
        'org-date
        'org-meta-line
        'org-link)))
    (add-hook 'org-mode-hook #'fix-org-block-faces)
    (font-lock-add-keywords
     'org-mode
     '(("^ *\\([-]\\) "
        (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    (defface org-checkbox-done-text
      '((t (:foreground "#71696A" :strike-through t)))
      "Face for the text part of a checked org-mode checkbox.")
    
    (font-lock-add-keywords
     'org-mode
     `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)"
        1 'org-checkbox-done-text prepend))
     'append)
    (let* ((variable-tuple
            (cond ((x-list-fonts   "Futura Round")    '(:font   "Futura Round"))
                  ((x-list-fonts   "ETBembo")         '(:font   "ETBembo"))
                  ((x-list-fonts   "Source Sans Pro") '(:font   "Source Sans Pro"))
                  ((x-list-fonts   "Lucida Grande")   '(:font   "Lucida Grande"))
                  ((x-list-fonts   "Verdana")         '(:font   "Verdana"))
                  ((x-family-fonts "Sans Serif")      '(:family "Sans Serif"))
                  (nil (warn "Cannot find a Sans Serif Font."))))
           (base-font-color (face-foreground 'default nil 'default))
           (headline `(:inherit default :weight regular
                                :foreground "gray25")))
    
      (custom-theme-set-faces
       'user
       `(org-level-8        ((t (,@headline ,@variable-tuple))))
       `(org-level-7        ((t (,@headline ,@variable-tuple))))
       `(org-level-6        ((t (,@headline ,@variable-tuple))))
       `(org-level-5        ((t (,@headline ,@variable-tuple))))
       `(org-level-4        ((t (,@headline ,@variable-tuple :height 1.1))))
       `(org-level-3        ((t (,@headline ,@variable-tuple :height 1.15))))
       `(org-level-2        ((t (,@headline ,@variable-tuple :height 1.2))))
       `(org-level-1        ((t (,@headline ,@variable-tuple :height 1.3))))
       `(org-headline-done  ((t (,@headline ,@variable-tuple :strike-through nil))))
       `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
    ;;(add-to-list 'org-file-apps '(directory . emacs))
    (org-clock-persistence-insinuate)
    (org-load-modules-maybe t)
    (setq org-src-tab-acts-natively t)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (js . t)
       (rust . t)
       (typescript . t)))
    (setq org-babel-js-function-wrapper
          "console.log(require('util').inspect(function(){\n%s\n}(), { depth: 100 }))"))

  ;; Maintains a clean TOC in the first section with the :TOC: tag.
  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-enable))
  ;; Cleans up "online mode" when connecting using TRAMP
  (use-package org-indent :straight nil :ensure nil :after org)

(use-package org-superstar
  :after org
  :hook
  (org-mode . org-superstar-mode)
  :custom
  (org-superstar-headline-bullets-list '("▪"
                                         "▫"
                                         "•"
                                         "◦"
                                         )))

(with-eval-after-load 'org
  (defvar-local rasmus/org-at-src-begin -1
    "Variable that holds whether last position was a ")

  (defvar rasmus/ob-header-symbol ?☰
    "Symbol used for babel headers")

  (defun rasmus/org-prettify-src--update ()
    (let ((case-fold-search t)
          (re "^[ \t]*#\\+begin_src[ \t]+[^ \f\t\n\r\v]+[ \t]*")
          found)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward re nil t)
          (goto-char (match-end 0))
          (let ((args (org-trim
                       (buffer-substring-no-properties (point)
                                                       (line-end-position)))))
            (when (org-string-nw-p args)
              (let ((new-cell (cons args rasmus/ob-header-symbol)))
                (cl-pushnew new-cell prettify-symbols-alist :test #'equal)
                (cl-pushnew new-cell found :test #'equal)))))
        (setq prettify-symbols-alist
              (cl-set-difference prettify-symbols-alist
                                 (cl-set-difference
                                  (cl-remove-if-not
                                   (lambda (elm)
                                     (eq (cdr elm) rasmus/ob-header-symbol))
                                   prettify-symbols-alist)
                                  found :test #'equal)))
        ;; Clean up old font-lock-keywords.
        (font-lock-remove-keywords nil prettify-symbols--keywords)
        (setq prettify-symbols--keywords (prettify-symbols--make-keywords))
        (font-lock-add-keywords nil prettify-symbols--keywords)
        (while (re-search-forward re nil t)
          (font-lock-flush (line-beginning-position) (line-end-position))))))

  (defun rasmus/org-prettify-src ()
    "Hide src options via `prettify-symbols-mode'.

        `prettify-symbols-mode' is used because it has uncollapasing. It's
        may not be efficient."
    (let* ((case-fold-search t)
           (at-src-block (save-excursion
                           (beginning-of-line)
                           (looking-at "^[ \t]*#\\+begin_src[ \t]+[^ \f\t\n\r\v]+[ \t]*"))))
      ;; Test if we moved out of a block.
      (when (or (and rasmus/org-at-src-begin
                     (not at-src-block))
                ;; File was just opened.
                (eq rasmus/org-at-src-begin -1))
        (rasmus/org-prettify-src--update))
      ;; Remove composition if at line; doesn't work properly.
      ;; (when at-src-block
      ;;   (with-silent-modifications
      ;;     (remove-text-properties (match-end 0)
      ;;                             (1+ (line-end-position))
      ;;                             '(composition))))
      (setq rasmus/org-at-src-begin at-src-block)))

  ;; This function helps to produce a single glyph out of a
  ;; string. The glyph can then be used in prettify-symbols-alist.
  ;; This function was provided by Ihor in the org-mode mailing list.
  (defun yant/str-to-glyph (str)
    "Transform string into glyph, displayed correctly."
    (let ((composition nil))
      (dolist (char (string-to-list str)
                    (nreverse (cdr composition)))
        (push char composition)
        (push '(Br . Bl) composition))))

  (defun rasmus/org-prettify-symbols ()
    (mapc (apply-partially 'add-to-list 'prettify-symbols-alist)
          (cl-reduce 'append
                     (mapcar (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                             `(("#+begin_src" . ?⎡) ;; ⎡ ➤ 🖝 ➟ ➤ ✎
                               ;; multi-character strings can be used with something like this:
                               ;; ("#+begin_src" . ,(yant/str-to-glyph "```"))
                               ("#+end_src"   . ?⎣) ;; ⎣ ✐
                               ("#+header:" . ,rasmus/ob-header-symbol)
                               ("#+begin_quote" . ?«)
                               ("#+end_quote" . ?»)))))
    (turn-on-prettify-symbols-mode)
    (add-hook 'post-command-hook 'rasmus/org-prettify-src t t))
  (add-hook 'org-mode-hook #'rasmus/org-prettify-symbols))

(use-package org-agenda
  :straight (:type built-in)
  :after org
  :bind (:map org-agenda-mode-map
              ("X" . my/org-agenda-mark-done-and-add-followup)
              ("x" . my/org-agenda-done))
  :preface
  (defun my/org-agenda-done (&optional arg)
    "Mark current TODO as done.
  This changes the line at point, all other lines in the agenda referring to
  the same tree node, and the headline of the tree node in the Org-mode file."
    (interactive "P")
    (org-agenda-todo "DONE"))

  (defun my/org-agenda-mark-done-and-add-followup ()
    "Mark the current TODO as done and add another task after it.
   Creates it at the same level as the previous task, so it's better to use
   this with to-do items than with projects or headings."
    (interactive)
    (org-agenda-todo "DONE")
    (org-agenda-switch-to)
    (org-capture 0 "t"))
  :custom
  (org-agenda-dim-blocked-tasks t)
  (org-agenda-files '("~/.personal/agenda"))
  (org-agenda-inhibit-startup t)
  (org-agenda-show-log t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-span 2)
  (org-agenda-start-on-weekday 6)
  (org-agenda-sticky nil)
  (org-agenda-tags-column -100)
  (org-agenda-time-grid '((daily today require-timed)))
  (org-agenda-use-tag-inheritance t)
  (org-columns-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS")
  (org-default-notes-file "~/.personal/agenda/organizer.org")
  (org-directory "~/.personal")
  (org-enforce-todo-dependencies t)
  (org-habit-graph-column 80)
  (org-habit-show-habits-only-for-today nil)
  (org-track-ordered-property-with-tag t))

(use-package org-capture
  :straight (:type built-in)
  :after org
  :preface
  (defvar my/org-basic-task-template "* TODO %^{Task}
:PROPERTIES:
:Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00|8:00|16:00|24:00|32:00|40:00}
:END:
%a
Captured %<%Y-%m-%d %H:%M>" "Template for basic task.")

  (defvar my/org-contacts-template "* %(org-contacts-template-name)
:PROPERTIES:
:ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
:BIRTHDAY: %^{yyyy-mm-dd}
:EMAIL: %(org-contacts-template-email)
:NOTE: %^{NOTE}
:END:" "Template for org-contacts.")
  :custom
  (org-capture-templates
    `(("c" "Contact" entry (file+headline "~/.personal/agenda/contacts.org" "Friends"),
      my/org-contacts-template
      :empty-lines 1)

     ("p" "People" entry (file+headline "~/.personal/agenda/people.org" "Tasks"),
      my/org-basic-task-template
      :empty-lines 1)

     ("w" "Work" entry (file+headline "~/.personal/agenda/work.org" "Tasks"),
      my/org-basic-task-template
      :empty-lines 1)

     ("t" "Task" entry (file+headline "~/.personal/agenda/organizer.org" "Tasks"),
      my/org-basic-task-template
      :empty-lines 1))))

(use-package org-clock
  :straight nil
  :ensure nil
  :after org
  :preface
  (defun my/org-mode-ask-effort ()
    "Ask for an effort estimate when clocking in."
    (unless (org-entry-get (point) "Effort")
      (let ((effort
             (completing-read
              "Effort: "
              (org-entry-get-multivalued-property (point) "Effort"))))
        (unless (equal effort "")
          (org-set-property "Effort" effort)))))
  :hook (org-clock-in-prepare-hook . my/org-mode-ask-effort)
  :custom
  (org-clock-clocktable-default-properties
   '(:block day :maxlevel 3 :scope agenda :link t :compact t :formula %
            :step day :fileskip0 t :stepskip0 t :narrow 80
            :properties ("Effort" "CLOCKSUM" "CLOCKSUM_T" "TODO")))
  (org-clock-continuously nil)
  (org-clock-in-switch-to-state "STARTED")
  (org-clock-out-remove-zero-time-clocks t)
  (org-clock-persist t)
  (org-clock-persist-file (expand-file-name (format "%s/emacs/org-clock-save.el" xdg-cache)))
  (org-clock-persist-query-resume nil)
  (org-clock-report-include-clocking-task t)
  (org-show-notification-handler (lambda (msg) (alert msg))))

;; Need iso8601 to parse Org-mode date strings YYYY-MM-DD into useful data
(require 'parse-time)
(require 'cl)
(require 'cl-lib)

;; Utility for immutable update of a single element in a list
(defun seq-update-nth (n fn xa)
  "A mechanism for applying `fn` to the `n`th element of `xa` returning a new seq"
  (seq-map-indexed
   (lambda (elt idx)
     (if (eq n idx)
         (funcall fn elt)
       elt))
   xa))

;; Utility for picking just values from a plist.
(defun plist-get-values (plist)
  (if (null plist) nil
    (cons (cadr plist) (plist-get-values (cddr plist)))))

;; First some standard customization for org-clock-csv
(defvar my/custom-org-clock-csv-header "week,employee,date,cost_type,cost_code,explanation,hours,rate,subledger_type,subledger")

(defun my/org-clock-csv-blocknum-of-timestamp (date-string)
  "Given the start timestamp of a task (2020-01-01 Mon 04:15), determine the 3/4-digit numeric week as a string for the date"
  (let* ((date-elements
          (parse-time-string
           (format-time-string "%Y-%m-%d %a %H:%M" (date-to-time date-string))))
         (day-of-week (nth 6 date-elements))
         (month (nth 4 date-elements))
         (day-of-week-seq
          (seq-map-indexed
           (lambda (date idx) (mod (- day-of-week idx) 7))
           (reverse (number-sequence 1 (- (nth 3 date-elements) 1)))))
         (week
          (seq-reduce
           (lambda (acc day) (if (eq 1 day) (+ acc 1) acc))
           ;; Step over the elapsed days of the month
           day-of-week-seq
           1)))
    (format "%s%s" (org-clock-csv--pad month) (org-clock-csv--pad week))))

(defun my/org-clock-csv-format-excel-date (date-string)
  "Given the start timestamp of a task (2020-01-01 Mon 04:15), return the US date format of the date portion of that timestamp, ie 01/01/2020"
  (let ((date-elements (parse-time-string date-string)))
    (mapconcat #'identity
               (list (number-to-string (nth 4 date-elements))
                     (number-to-string (nth 3 date-elements))
                     (number-to-string (nth 5 date-elements)))
               "/")))

(defun my/org-clock-duration-to-integer (duration)
  "Given a duration string of shape \"HH:MM\", returns an integer number of minutes elapsed."
  (apply #'+ (seq-map-indexed
              (lambda (val idx)
                (if (eq idx 0) (* 60 (string-to-number val))
                  (string-to-number val)))
              (split-string duration ":" t))))

(defun my/get-billable-duration (duration)
  "Given a duration in ##:MM format, returns a number 1.5 in hours, rounded to the nearest appropriate billable multiple of 0.5h."
  (let* ((round-down-to-half-below 40)
         (round-up-to-half-above 10)
         (total-minutes (my/org-clock-duration-to-integer duration))
         (minutes (mod total-minutes 60))
         (hours (+ (/ total-minutes 60)
                   (if (< round-down-to-half-below minutes) 1 0)))
         (minutes (cond ((< round-down-to-half-below minutes) 0)
                        ((> round-up-to-half-above minutes) 0)
                        (t 0.5))))
    (number-to-string (+ hours minutes))))

(defun my/custom-org-clock-csv-row-fmt (plist)
  "Custom row formatting function."
  (let ((employee-number "81"))
    (mapconcat #'identity
               (list (my/org-clock-csv-blocknum-of-timestamp
                      (plist-get plist ':start))
                     employee-number
                     (my/org-clock-csv-format-excel-date (plist-get plist ':start))
                     (org-clock-csv--read-property plist "COST_TYPE")
                     (org-clock-csv--read-property plist "COST_CODE")
                     (org-clock-csv--escape (plist-get plist ':task))
                     (my/get-billable-duration (plist-get plist ':duration))
                     (org-clock-csv--read-property plist "BILLABLE_RATE")
                     (org-clock-csv--read-property plist "SUBLEDGER_TYPE")
                     (org-clock-csv--read-property plist "SUBLEDGER"))
               ",")))

;; With the above all set, we want to extend the base org-clock-csv
;; to add some advice extending the element aggregation to allow filtering and
;; consolidating rows.

(defun my/integer-to-clock-duration (n)
  "Given a number of elapsed minutes, returns a duration string of shape \"HH:MM\"."
  (format "%s:%s"
          (number-to-string (/ n 60))
          (org-clock-csv--pad (mod n 60))))

(defun my/combine-durations (&rest durations)
  "Given any number of duration strings of shape \"HH:MM\", combines them together and returns an aggregate duration string in the same shape."
  (my/integer-to-clock-duration
   (seq-reduce
    (lambda (acc duration) (+ acc (my/org-clock-duration-to-integer duration)))
    durations 0)))

(defun my/sort-datestrings (&rest datestrings)
  "Give any number of Org timestamp date strings of shape \"YYYY-MM-DD ddd HH:MM\", sorts that list in ascending order."
  (sort datestrings
        (lambda (a b) (time-less-p (date-to-time a) (date-to-time b)))))

(defun my/sort-entries-by-date (entries)
  (sort entries
        (lambda (a b) (time-less-p (date-to-time (plist-get a ':start)) (date-to-time (plist-get b ':start))))))

(defun my/concat-element-plists (left right)
  "Given two parsed ELEMENT plists, combines them together into a single item"
  (let* ((start (car (my/sort-datestrings (plist-get left ':start) (plist-get right ':start))))
         (end (cadr (my/sort-datestrings (plist-get left ':end) (plist-get right ':end))))
         (combined-duration (my/combine-durations (plist-get left ':duration) (plist-get right ':duration))))
    (list :task (plist-get left ':task)
          :headline (plist-get left ':headline)
          :parents (plist-get left ':parents)
          :title (plist-get left ':title)
          :category (plist-get left ':category)
          :start start
          :end end
          :duration combined-duration
          :properties (plist-get left ':properties)
          :effort (plist-get left ':effort)
          :ishabit (plist-get left ':ishabit)
          :tags (plist-get left ':tags))))

(defun my/consolidate-entries-get-key (entry)
  "Given a parsed ELEMENT plist, returns a unique path+date key"
  (let* ((split-date (parse-time-string (plist-get entry :start)))
         (year (number-to-string (nth 5 split-date)))
         (month (number-to-string (nth 4 split-date)))
         (day (number-to-string (nth 3 split-date)))
         (fullpath (concat (s-join org-clock-csv-headline-separator (plist-get entry ':parents)) "/" (plist-get entry :task)))
         (keyparts (list fullpath year month day)))
    (mapconcat 'identity keyparts "::")))

(defun my/consolidate-entries (entries)
  "Given a list of parsed ELEMENT plists, combines tasks with matching paths."
  (plist-get-values
   (seq-reduce
    (lambda (acc entry)
      (let ((key (my/consolidate-entries-get-key entry)))
        (if (lax-plist-get acc key)
            (lax-plist-put acc key (my/concat-element-plists (lax-plist-get acc key) entry))
          (lax-plist-put acc key entry))))
    entries
    nil)))

(defun my/filter-by-date (entries &optional from-date to-date)
  "Given a date range and a list of entries, filters the entries to only those which fall within the specified dates."
  ;; TODO: There's an issue here where dates that don't have time components
  ;; parse as MUCH earlier time strings. As a result, :start dates are always
  ;; AFTER the from-date, and the whole thing falls over.
  (if (not (or from-date to-date)) entries
    (seq-filter
     (lambda (entry)
       (let ((from-time (if (null from-date) nil (date-to-time from-date)))
             (to-time (if (null to-date) nil (date-to-time to-date)))
             (start (date-to-time (plist-get entry ':start)))
             (end (date-to-time (plist-get entry ':end))))
         (seq-reduce
          (lambda (acc next) (and acc next))
          (list (if (null from-time) t (time-less-p from-time start))
                (if (null to-time) t (time-less-p end to-time)))
          t)))
     entries)))

(defun advice-once (symbol where function &optional props)
  (advice-add symbol :after `(lambda (&rest _) (advice-remove ',symbol ',function)))
  (advice-add symbol where function props))

(defun my/consolidate-and-filter (entries)
  (my/consolidate-entries
   (my/sort-entries-by-date
    (my/filter-by-date
     entries
     (read-string "Start Date:")
     (read-string "End Date:")))))

(defun my/org-clock-csv (&optional infile no-switch from-date to-date use-current)
  "Custom wrapper around org-clock-csv to add two features I found useful but didn't think merited commiting to the project:

1. Add entry consolidation
   I want clock entries to be bundled by task/day, so that multiple clocks on the same day are considered part of the same entry.
2. Add filtering by date range
   I only want to output the last day/week's entries, rather that needing to do post processing to determine which entries are new."
  (interactive)
  (advice-once #'org-clock-csv--get-entries :filter-return #'my/consolidate-and-filter)
  (org-clock-csv infile no-switch use-current))

(use-package org-clock-csv
  :straight (org-clock-csv :type git :host github :repo "atheriel/org-clock-csv" :fork (:host github :repo "smartintruesdell/org-clock-csv"))
  :after org-clock
  :custom
  (org-clock-csv-header my/custom-org-clock-csv-header)
  (org-clock-csv-row-fmt #'my/custom-org-clock-csv-row-fmt))

(use-package ob-emacs-lisp :straight nil :ensure nil :after org)
(use-package ob-java :straight nil :ensure nil :after org)
(use-package ob-typescript :straight nil :ensure nil  :after org)
(use-package ob-org :straight nil :ensure nil :after org)
(use-package ob-python :straight nil :ensure nil :after org)
(use-package ob-rust :straight nil :ensure nil :after org)

(use-package fira-code-mode
  :custom (fira-code-mode-disabled-ligatures '("**" "***"))
  :hook (prog-mode js-mode ts-mode typescript-mode typescriptreact-mode rust-mode)
  :init (add-hook 'after-make-frame-functions #'fira-code-mode--setup))

(set-frame-font "-*-Fira Code-semilight-normal-normal-*-14-*-*-*-m-0-iso10646-1") ; Set the default fixed-rhythm font.
(set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")

(use-package org-roam
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory (expand-file-name (format "%s/org-roam" xdg-data)))
  (org-roam-index-file (expand-file-name (format "%s/org-roam/index.org")))
  :bind (("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n I" . org-roam-insert-immediate)))

(use-package graphviz-dot-mode
  :config
  (setq graphviz-dot-indent-width 4))

(use-package company-org-roam
  :config
  (add-to-list 'company-backends 'company-org-roam))

(straight-use-package '(company-graphviz-dot :type git :host github :repo "ppareit/graphviz-dot-mode")
  )

(use-package tree-sitter
  :ensure t
  :config
  ;; activate tree-sitter on any buffer containing code for which it has a
  ;; parser available
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs
  :ensure t
  :after tree-sitter)

(use-package typescript-mode
  :after tree-sitter
  :config
  ;; Split from typescript-mode to allow eglot to determine the langauge
  (define-derived-mode typescriptreact-mode typescript-mode
    "TypeScript TSX")
  (add-to-list 'auto-mode-alist '("\\.tsx?" . typescriptreact-mode))
  (add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx)))

(use-package tsi
  :after tree-sitter
  :straight (:host github :repo "orzechowskid/tsi.el")
  :commands (tsi-typescript-mode tsi-json-mode tsi-css-mode)
  :init
  (add-hook 'typescript-mode-hook (lambda () (tsi-typescript-mode 1)))
  (add-hook 'json-mode-hook (lambda () (tsi-json-mode 1)))
  (add-hook 'css-mode-hook (lambda () (tsi-css-mode 1)))
  (add-hook 'scss-mode-hook (lambda () (tsi-scss-mode 1))))

(use-package apheleia
  :ensure t
  :config
  (apheleia-global-mode +1))

(use-package eglot
  :ensure t)

(use-package company-tabnine
  :config
  ;; Trigger completion not-quite-immediately.
  (setq company-idle-delay 0.5)

  ;; Number the candidates (use M-1, M-2 etc to select completions).
  (setq company-show-numbers t)

  ;; Use the tab-and-go frontend.
  ;; Allows TAB to select and complete at the same time.
  (company-tng-configure-default)
  (add-to-list 'company-backends 'company-tabnine)
  (setq company-frontends
        '(company-tng-frontend
          company-pseudo-tooltip-frontend
          company-echo-metadata-frontend)))

;; Stolen from (http://endlessparentheses.com/ansi-colors-in-the-compilation-buffer-output.html)
(require 'ansi-color)
(defun endless/colorize-compilation ()
  "Colorize from `compilation-filter-start' to `point'."
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region
     compilation-filter-start (point))))

(add-hook 'compilation-filter-hook
          #'endless/colorize-compilation)

;; Stolen from (https://oleksandrmanzyuk.wordpress.com/2011/11/05/better-emacs-shell-part-i/)
(defun regexp-alternatives (regexps)
  "Return the alternation of a list of regexps."
  (mapconcat (lambda (regexp)
               (concat "\\(?:" regexp "\\)"))
             regexps "\\|"))

(defvar non-sgr-control-sequence-regexp nil
  "Regexp that matches non-SGR control sequences.")

(setq non-sgr-control-sequence-regexp
      (regexp-alternatives
       '(;; icon name escape sequences
         "\033\\][0-2];.*?\007"
         ;; non-SGR CSI escape sequences
         "\033\\[\\??[0-9;]*[^0-9;m]"
         ;; noop
         "\012\033\\[2K\033\\[1F"
         )))

(defun filter-non-sgr-control-sequences-in-region (begin end)
  (save-excursion
    (goto-char begin)
    (while (re-search-forward
            non-sgr-control-sequence-regexp end t)
      (replace-match ""))))

(defun filter-non-sgr-control-sequences-in-output (ignored)
  (let ((start-marker
         (or comint-last-output-start
             (point-min-marker)))
        (end-marker
         (process-mark
          (get-buffer-process (current-buffer)))))
    (filter-non-sgr-control-sequences-in-region
     start-marker
     end-marker)))

(add-hook 'comint-output-filter-functions
          'filter-non-sgr-control-sequences-in-output)

(use-package csv-mode)

(use-package dockerfile-mode
  :mode "Dockerfile\\'")

(use-package eldoc
  :hook (emacs-lisp-mode . eldoc-mode))

(use-package json-mode
  :mode ("\\.json\\'" "\\.patch\\'")
  :hook (before-save . my/json-mode-before-save-hook)
  :preface
  (defun my/json-mode-before-save-hook ()
    (when (eq major-mode 'json-mode)
      (json-pretty-print-buffer))))

(use-package markdown-mode
  :mode ("\\.markdown\\'" "\\.md\\'")
  :custom (markdown-command "pandoc"))

(use-package markdown-preview-mode
  :after markdown-mode
  :custom
  (markdown-preview-javascript
   (list (concat "https://github.com/highlightjs/highlight.js/"
                 "9.15.6/highlight.min.js")
         "<script>
            $(document).on('mdContentChange', function() {
              $('pre code').each(function(i, block)  {
                hljs.highlightBlock(block);
              });
            });
          </script>"))
  (markdown-preview-stylesheets
   (list (concat "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/"
                 "3.0.1/github-markdown.min.css")
         (concat "https://github.com/highlightjs/highlight.js/"
                 "9.15.6/styles/github.min.css")

         "<style>
            .markdown-body {
              box-sizing: border-box;
              min-width: 200px;
              max-width: 980px;
              margin: 0 auto;
              padding: 45px;
            }

            @media (max-width: 767px) { .markdown-body { padding: 15px; } }
          </style>")))

(defun no-junk-please-were-unixish ()
(let ((coding-str (symbol-name buffer-file-coding-system)))
  (when (string-match "-\\(?:dos\\|mac\\)$" coding-str)
    (set-buffer-file-coding-system 'unix))))

(add-hook 'find-file-hooks 'no-junk-please-were-unixish)

(use-package css-mode
  :custom (css-indent-offset 2))

(use-package less-css-mode
  :mode "\\.less\\'")

(use-package scss-mode
  :mode "\\.scss\\'")

(use-package rust-mode
  :mode ("\\.rs\\'")
  :bind (:map rust-mode-map ("C-c <tab>" . rust-format-buffer)))
(use-package cargo
  :after rust-mode
  :bind(
        :map rust-mode-map
        ("C-c c" . cargo-process-check)
        ("C-c b" . cargo-process-build)
        ("C-c r" . cargo-process-run)
        ("C-c t" . cargo-process-test)
        ("C-c T" . cargo-process-current-file-tests)
        ("C-c f" . cargo-process-fmt)))

;; use local eslint from node_modules before global
;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
(defun my/use-eslint-from-node-modules ()
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint (and root
                      (expand-file-name "node_modules/eslint/bin/eslint.js"
                                        root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))

(use-package flycheck
  :hook
  (after-init .  global-flycheck-mode)
  :config
  (flycheck-add-mode 'javascript-eslint 'typescriptreact-mode)
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules))


(use-package flycheck-rust
  :after rust-mode
  :init
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

(use-package restclient)

(use-package lua-mode)

(use-package alert
  :custom (alert-default-style 'libnotify))

(use-package company
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay 0.5)
  (company-minimum-prefix-length 1)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package ibuffer
  :bind ("C-x C-b" . ibuffer))
(use-package ibuffer-projectile
  :after ibuffer
  :preface
  (defun my/ibuffer-projectile ()
    (ibuffer-projectile-set-filter-groups)
    (unless (eq ibuffer-sorting-mode 'alphabetic)
      (ibuffer-do-sort-by-alphabetic)))
  :hook (ibuffer . my/ibuffer-projectile))

(use-package calc
  :custom
  (math-additional-units
   '((GiB "1024 * MiB" "Giga Byte")
     (MiB "1024 * KiB" "Mega Byte")
     (KiB "1024 * B" "Kilo Byte")
     (B nil "Byte")
     (Gib "1024 * Mib" "Giga Bit")
     (Mib "1024 * Kib" "Mega Bit")
     (Kib "1024 * b" "Kilo Bit")
     (b "B / 8" "Bit")))
  (math-units-table nil))

(use-package calendar
  :custom (calendar-mark-holidays-flag t))

(use-package holidays
  :straight nil
  :ensure nil
  :custom
  (holiday-bahai-holidays nil)
  (holiday-christian-holidays
   '((holiday-easter-etc -47 "Mardi Gras")
     (holiday-easter-etc 0 "Easter")
     (holiday-fixed 11 1 "All Saints' Day")
     (holiday-fixed 12 24 "Christmas Eve")
     (holiday-fixed 12 25 "Christmas Day")))
  (holiday-general-holidays
   '((holiday-fixed 1 1 "New Year's Day")
     (holiday-fixed 2 14 "Valentine's Day")
     (holiday-fixed 3 8 "International Women's Day")
     (holiday-fixed 3 14 "Saint Patrick's Day")
     (holiday-fixed 4 4 "Independence Day")
     (holiday-fixed 10 31 "Halloween")
     (holiday-float 11 4 -1 "Thanksgiving")
     (holiday-fixed 12 31 "New Year's Eve")))
  (holiday-hebrew-holidays nil)
  (holiday-islamic-holidays nil)
  (holiday-local-holidays
   '((holiday-fixed 5 1 "Labor Day")
     (holiday-float 5 0 2 "Mother's Day")
     (holiday-float 6 0 3 "Father's Day")))
  (holiday-other-holidays
   '((holiday-fixed 1 1 "Emilia's Birthday")
     (holiday-fixed 4 18 "Wedding Anniversary")
     (holiday-fixed 7 9 "Sebastian's Birthday")
     (holiday-fixed 7 16 "Shawn's Birthday")
     (holiday-fixed 8 19 "Alexandra's Birthday")
     (holiday-fixed 10 9 "Susie's Birthday")
     (holiday-fixed 10 22 "Jason's Birthday")))
  (holiday-oriental-holidays nil))

(use-package deadgrep
  :bind ("<f5>" . deadgrep))

(use-package dired
  :straight nil
  :ensure nil
  :bind (:map dired-mode-map ("M-+" . dired-create-empty-file))
  :custom
  (dired-auto-revert-buffer t)
  (dired-dwim-target t)
  (dired-hide-details-hide-symlink-targets nil)
  (dired-listing-switches "-alh")
  (dired-ls-F-marks-symlinks nil)
  (dired-recursive-copies 'always)
  :init
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode))))

(use-package async)

(defvar *config-file* (expand-file-name "config.org" user-emacs-directory)
  "The configuration file.")

(defvar *config-last-change* (nth 5 (file-attributes *config-file*))
  "Last modification time of the configuration file.")

(defvar *show-async-tangle-results* nil
  "Keeps *emacs* async buffers around for later inspection.")

(defun my/config-updated ()
  "Checks if the configuration file has been updated since the last time."
  (time-less-p *config-last-change*
               (nth 5 (file-attributes *config-file*))))

(defun my/config-tangle ()
  "Tangles the org file asynchronously."
  (when (my/config-updated)
    (setq *config-last-change*
          (nth 5 (file-attributes *config-file*)))
    (my/async-babel-tangle *config-file*)))

(defun my/async-babel-tangle (org-file)
  "Tangles the org file asynchronously."
  (let ((init-tangle-start-time (current-time))
        (file (buffer-file-name))
        (async-quiet-switch "-q"))
    (async-start
     `(lambda ()
        (require 'org)
        (org-babel-tangle-file ,org-file))
     (unless *show-async-tangle-results*
       `(lambda (result)
          (if result
              (message "SUCCESS: %s successfully tangled (%.2fs)."
                       ,org-file
                       (float-time (time-subtract (current-time)
                                                  ',init-tangle-start-time)))
            (message "ERROR: %s as tangle failed." ,org-file)))))))

;; (js-mode . aggressive-indent-mode)
(use-package aggressive-indent
  :hook ((css-mode . aggressive-indent-mode)
         (emacs-lisp-mode . aggressive-indent-mode)
         (lisp-mode . aggressive-indent-mode))
  :custom (aggressive-indent-comments-too))

(use-package move-text
  :bind (("M-p" . move-text-up)
         ("M-n" . move-text-down))
  :config (move-text-default-bindings))

(use-package rainbow-mode
  :hook (prog-mode))

(use-package autorevert
  :bind ("C-x R" . revert-buffer)
  :custom (auto-revert-verbose nil)
  :config (global-auto-revert-mode 1))

(use-package undo-tree
  :bind ("C--" . undo-tree-redo)
  :init (global-undo-tree-mode)
  :custom
  (undo-tree-visualizer-timestamps t)
  (undo-tree-visualizer-diff t)
  (undo-tree-auto-save-history nil))

(use-package which-key
  :config (which-key-mode))

(use-package all-the-icons
  :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window)))

(use-package all-the-icons-dired
  :init
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

(use-package counsel
  :after ivy
  :bind (("C-x C-d" . counsel-dired-jump)
         ("C-x C-h" . counsel-minibuffer-history)
         ("C-x C-l" . counsel-find-library)
         ("C-x C-r" . counsel-recentf)
         ("C-x C-u" . counsel-unicode-char)
         ("C-x C-v" . counsel-set-variable))
  :config (counsel-mode)
  :custom (counsel-rg-base-command "rg -S -M 150 --no-heading --line-number --color never %s"))

(use-package ivy
  :bind (("C-x b" . ivy-switch-buffer)
         ("C-x B" . ivy-switch-buffer-other-window)
         ("M-H"   . ivy-resume)
         :map ivy-minibuffer-map
              ("<tab>" . ivy-alt-done)
              ("C-i" . ivy-partial-or-done)

         :map ivy-switch-buffer-map
              ("C-k" . ivy-switch-buffer-kill))
  :custom
  (ivy-case-fold-search-default t)
  (ivy-count-format "(%d/%d) ")
  (ivy-re-builders-alist '((t . ivy--regex-plus)))
  (ivy-use-virtual-buffers t)
  :config (ivy-mode))

(use-package ivy-pass
  :after ivy
  :commands ivy-pass)

(use-package ivy-rich
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
                          ivy-rich-switch-buffer-align-virtual-buffer t
                          ivy-rich-path-style 'abbrev)
  :config (ivy-rich-mode 1))

(use-package all-the-icons-ivy
  :after (all-the-icons ivy)
  :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window))
  :config
  (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
  (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
  (all-the-icons-ivy-setup))

(use-package swiper
  :after ivy
  :bind (("C-s" . swiper)
         ("C-r" . swiper)
         :map swiper-map
              ("M-%" . swiper-query-replace)))

(defun my/smarter-move-beginning-of-line (arg)
    "Moves point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

(global-set-key [remap org-beginning-of-line] #'my/smarter-move-beginning-of-line)
(global-set-key [remap move-beginning-of-line] #'my/smarter-move-beginning-of-line)

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package smartparens
  :custom (sp-escape-quotes-after-insert nil)
  :config (smartparens-global-mode 1))

(use-package olivetti
  :custom
  (olivetti-body-width 120)
  :hook
  ((org-mode text-mode prog-mode) . olivetti-mode))

(use-package projectile
    :custom
    (projectile-cache-file (expand-file-name (format "%s/emacs/projectile.cache" xdg-cache)))
    (projectile-completion-system 'ivy)
    (projectile-enable-caching t)
;    (projectile-keymap-prefix (kbd "C-c C-p"))
    (projectile-known-projects-file (expand-file-name (format "%s/emacs/projectile-bookmarks.eld" xdg-cache)))
    (projectile-mode-line '(:eval (projectile-project-name)))
    (projectile-find-dir-include-top-level t)
    :config
    (define-key projectile-mode-map (kbd "C-c C-p") 'projectile-command-map)
    (projectile-global-mode)
    (add-to-list 'projectile-globally-ignored-directories "node_modules")
    (add-to-list 'projectile-globally-ignored-directories ".git"))

  (use-package counsel-projectile
    :after (counsel projectile)
    :config (counsel-projectile-mode 1))

(use-package recentf
  :bind ("C-c r" . recentf-open-files)
  :init (recentf-mode)
  :custom
  (recentf-exclude (list "COMMIT_EDITMSG"
                         "~$"
                         "/scp:"
                         "/ssh:"
                         "/sudo:"
                         "/tmp/"))
  (recentf-max-menu-items 15)
  (recentf-max-saved-items 200)
  (recentf-save-file (expand-file-name (format "%s/emacs/recentf" xdg-cache)))
  :config (run-at-time nil (* 5 60) 'recentf-save-list))

(use-package git-commit
  :after magit
  :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
  :custom (git-commit-summary-max-length 50)
  :preface
  (defun my/git-commit-auto-fill-everywhere ()
    "Ensures that the commit body does not exceed 80 characters."
    (setq fill-column 80)
    (setq-local comment-auto-fill-only-comments nil)))

(use-package magit
  :bind (("C-x G" . magit-status)))

(use-package git-gutter
  :init (global-git-gutter-mode +1))

(use-package simple
  :straight nil
  :ensure nil
  :hook (before-save . delete-trailing-whitespace))

(use-package hungry-delete
:config (global-hungry-delete-mode))

(use-package window
  :straight nil
  :ensure nil
  :bind (("C-x 3" . hsplit-last-buffer)
         ("C-x 2" . vsplit-last-buffer))
  :preface
  (defun hsplit-last-buffer ()
    "Gives the focus to the last created horizontal window."
    (interactive)
    (split-window-horizontally)
    (other-window 1))

  (defun vsplit-last-buffer ()
    "Gives the focus to the last created vertical window."
    (interactive)
    (split-window-vertically)
    (other-window 1)))

(use-package switch-window
  :straight nil
  :bind (("C-x o" . switch-window)
         ("C-x w" . switch-window-then-swap-buffer)))

(use-package hideshow)
(use-package sgml-mode)
(add-to-list 'hs-special-modes-alist
             '(nxml-mode
               "<!--\\|<[^/>]*[^/]>"
               "-->\\|</[^/>]*[^/]>"

               "<!--"
               sgml-skip-tag-forward
               nil))

(use-package avy
  :bind (("C-:" . avy-goto-char)
         ("C-'" . avy-goto-char-2)
         ("M-j" . avy-goto-char-timer)
         ("M-g f" . avy-goto-line)
         ("M-g w" . avy-goto-word-1)
         ("M-g e" . avy-goto-word-0)
         ))

(use-package yasnippet
  :config (yas-global-mode))

(use-package yasnippet-snippets
  :after yasnippet
  :config (yasnippet-snippets-initialize))

(use-package ivy-yasnippet :after yasnippet)

(defun ebpa/edebug-remove-all-instrumentation ()
  "Remove all edebug instrumentation by visiting each function
definition and running `eval-defun`."
  (interactive)
  (mapatoms
   (lambda (symbol)
     (when-let (pos (car-safe (get symbol 'edebug)))
       (with-current-buffer (marker-buffer pos)
         (goto-char (marker-position pos))
         (eval-defun nil))))))

(when (string-match "-[Mm]icrosoft" operating-system-release)
  ;; (defconst powershell-exe "/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe")
  ;; (when (file-executable-p powershell-exe)
  ;;   (defun my/wsl-browse-url (url &optional _new-window)
  ;;     "Opens link via powershell.exe"
  ;;     (interactive (browse-url-interactive-arg "URL: "))
  ;;     (let ((quotedUrl (format "start '%s'", url)))
  ;;       (apply 'call-process powershell-exe
  ;;              nil 0 nil (list "-Command" quotedUrl))))
  ;;   (setq-default browse-url-browser-function 'my/wsl-browse-url))
  (defun wsl-copy (start end)
    "Copies the currect selection to the WSL clipboard"
    (interactive "r")
    (shell-command-on-region start end "clip.exe")
    (deactivate-mark))
  (defun wsl-paste ()
    "Pastes to the current buffer from the WSL clipboard"
    (interactive)
    (let ((clipboard
           (shell-command-to-string "powershell.exe -command 'Get-Clipboard' 2> /dev/null")))
      (setq clipboard (replace-regexp-in-string "\r" "" clipboard))
      (setq clipboard (substring clipboard 0 -1)) ; Remove newline added by Powershell
      (insert clipboard)))

  (global-set-key (kbd "C-c C-c") 'wsl-copy)
  (global-set-key (kbd "C-c C-v") 'wsl-paste))
